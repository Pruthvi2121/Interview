1. Why Use Python:
    Python helps automate tasks like renaming files, searching and replacing text, or creating simple apps (like games or databases).
    It's faster and easier than other languages (like C, C++, or Java) for writing smaller programs.

2. Python vs Other Languages:
    Shell scripts are good for file tasks but not for complex apps.
    C/C++/Java take longer to develop due to a slower testing process.
    Python is simpler, faster, and easier to use, offering more features and error-checking than lower-level languages.

3. Python Features:
    Python has easy-to-use data types (like lists and dictionaries) for complex tasks.
    No need for variable declarations or brackets; just use indentation.
    Python can be extended with custom code (e.g., written in C) for better performance.

4.  Easy to Read and Write:
    Python programs are shorter and easier to understand than programs in languages like C or Java.
    It's an interpreted language, so you can run and test code without needing to compile it first.

5.  Built-in Tools:
    Python comes with many modules for handling files, networking, GUIs, and more.
    You can create reusable pieces of code, making your work more efficient.

6.  Interactive Development:
    Python allows for quick testing and experimentation using the interpreter.

Fun Fact:
    Python is named after the comedy show Monty Python's Flying Circus, not the snake!


1. Python as a Calculator
    -   Python can perform simple arithmetic with operators like +, -, *, /, and parentheses ().
    -   Division / always returns a floating-point number, while // provides floor division (integer result).
    -   Modulo % returns the remainder of division.
    -   Python uses ** for exponentiation.
    -   Variables can be assigned with =, and undefined variables result in an error.
    -   The _ variable stores the last result for ease of continuing calculations.
    -   Python supports integer (int), floating-point (float), and complex numbers (e.g., 3 + 5j).

2. Working with Text (Strings)
    -   Strings are enclosed in single quotes '...' or double quotes "...".
    -   To include quotes inside strings, escape them using \ or switch quote types.
    -   Special characters like newline (\n) can be included in strings; the print() function handles them correctly.
    -   Raw strings (prefixed with r) prevent special characters from being interpreted.
    -   Strings can span multiple lines using triple quotes """...""".
    -   String concatenation uses the + operator, and repetition uses *.
    -   Strings can be indexed and sliced (e.g., word[0] gives the first character, word[0:2] slices a substring).
    -   Negative indices allow accessing characters from the end.
    -   Strings are immutable: they cannot be changed directly (e.g., word[0] = 'J' results in an error).

3. Lists
    -   Lists are ordered collections of items and can hold different types of elements.
    -   Lists are mutable, meaning their contents can be changed (e.g., list[0] = new_value).
    -   You can append items to lists using append(), and concatenate lists with +.
    -   Lists support slicing and indexing, similar to strings.
    -   Simple assignment does not copy data; lists are referenced by multiple variables.
    -   Slicing a list creates a new list, and assignments to slices can change list content or size.
    -   Lists can be nested, meaning a list can contain other lists.

4. Basic Programming Concepts
    -   Python allows multiple assignments in one statement (e.g., a, b = 0, 1).
    -   The while loop runs as long as its condition is true; the condition can be any non-zero value (true) or zero (false).
    -   Indentation is used to group code blocks, and Python requires consistent indentation (e.g., tabs or spaces).
    -   The print() function prints values with spaces between multiple arguments and can handle newlines and special characters.
    -   The end parameter in print() can change the default newline behavior (e.g., print(a, end=',')).

5. Example of Fibonacci Sequence
    -   Demonstrates using a while loop and multiple assignment to generate the Fibonacci sequence.
    -   Shows how Python's print() function and indentation work in practice.

Example -
    a, b = 0, 1
    while a < 10:
        print(a)
        a, b = b, a + b

############################################################################################################################################
